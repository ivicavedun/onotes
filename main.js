/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AutoTimestampNotes
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var AutoTimestampNotes = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.isCreatingNote = false;
  }
  async onload() {
    this.app.workspace.onLayoutReady(() => {
      this.createAndOpenNote();
    });
    this.registerDomEvent(
      document,
      "keydown",
      (evt) => {
        if ((evt.ctrlKey || evt.metaKey) && evt.key === "n" && !evt.shiftKey) {
          evt.preventDefault();
          evt.stopPropagation();
          this.createAndOpenNote();
        }
      },
      { capture: true }
    );
    this.registerEvent(
      this.app.vault.on("create", async (file) => {
        if (this.isCreatingNote)
          return;
        if (file instanceof import_obsidian.TFile && file.extension === "md") {
          if (file.basename === "Untitled" || file.basename.startsWith("Untitled ")) {
            this.isCreatingNote = true;
            setTimeout(async () => {
              try {
                await this.renameAndMoveFile(file);
              } catch (error) {
                console.error("Failed to rename/move file:", error);
              } finally {
                setTimeout(() => {
                  this.isCreatingNote = false;
                }, 200);
              }
            }, 50);
          }
        }
      })
    );
  }
  async renameAndMoveFile(file) {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, "0");
    const day = String(now.getDate()).padStart(2, "0");
    const timestamp = Math.floor(now.getTime() / 1e3);
    const folderPath = (0, import_obsidian.normalizePath)(`note/${year}-${month}-${day}`);
    const newPath = (0, import_obsidian.normalizePath)(`${folderPath}/${timestamp}.md`);
    try {
      if (!this.app.vault.getAbstractFileByPath(folderPath)) {
        await this.app.vault.createFolder(folderPath);
      }
    } catch (e) {
    }
    await this.app.fileManager.renameFile(file, newPath);
  }
  async createAndOpenNote() {
    if (this.isCreatingNote)
      return;
    this.isCreatingNote = true;
    try {
      const now = new Date();
      const year = now.getFullYear();
      const month = String(now.getMonth() + 1).padStart(2, "0");
      const day = String(now.getDate()).padStart(2, "0");
      const timestamp = Math.floor(now.getTime() / 1e3);
      const folderPath = (0, import_obsidian.normalizePath)(`note/${year}-${month}-${day}`);
      const filePath = (0, import_obsidian.normalizePath)(`${folderPath}/${timestamp}.md`);
      try {
        if (!this.app.vault.getAbstractFileByPath(folderPath)) {
          await this.app.vault.createFolder(folderPath);
        }
      } catch (e) {
      }
      const file = await this.app.vault.create(filePath, "");
      const leaf = this.app.workspace.getLeaf(false);
      await leaf.openFile(file);
    } catch (error) {
      console.error("Error creating timestamp note:", error);
    } finally {
      setTimeout(() => {
        this.isCreatingNote = false;
      }, 200);
    }
  }
};
